[{"E:\\FYP\\geo-ecommerce\\src\\index.js":"1","E:\\FYP\\geo-ecommerce\\src\\reportWebVitals.js":"2","E:\\FYP\\geo-ecommerce\\src\\App.js":"3","E:\\FYP\\geo-ecommerce\\src\\pages\\login\\index.jsx":"4","E:\\FYP\\geo-ecommerce\\src\\components\\login_sign_up_components\\index.js":"5","E:\\FYP\\geo-ecommerce\\src\\pages\\register\\index.jsx":"6","E:\\FYP\\geo-ecommerce\\src\\config.js":"7","E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\index.js":"8","E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\style.js":"9","E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\index.js":"10","E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\search_bar.js":"11","E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\navbar_items.js":"12","E:\\FYP\\geo-ecommerce\\src\\enums\\index.js":"13","E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\style.js":"14","E:\\FYP\\geo-ecommerce\\src\\utils\\history.js":"15","E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\components\\buy_sell_info.js":"16","E:\\FYP\\geo-ecommerce\\src\\redux\\store.js":"17","E:\\FYP\\geo-ecommerce\\src\\redux\\user\\userReducer.js":"18","E:\\FYP\\geo-ecommerce\\src\\redux\\user\\userTypes.js":"19","E:\\FYP\\geo-ecommerce\\src\\redux\\index.js":"20","E:\\FYP\\geo-ecommerce\\src\\redux\\user\\userActions.js":"21","E:\\FYP\\geo-ecommerce\\src\\services\\auth.js":"22","E:\\FYP\\geo-ecommerce\\src\\utils\\storage.js":"23","E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\components\\how_saman_works_info.js":"24","E:\\FYP\\geo-ecommerce\\src\\routes.js":"25","E:\\FYP\\geo-ecommerce\\src\\layout\\blank_layout.js":"26","E:\\FYP\\geo-ecommerce\\src\\layout\\conditional_layout.js":"27","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\index.js":"28","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\style.js":"29","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\index.js":"30","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\style.js":"31","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\productDetailTable.js":"32","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\uploadImageComponent.js":"33","E:\\FYP\\geo-ecommerce\\src\\redux\\seller_products\\sellerProductsActions.js":"34","E:\\FYP\\geo-ecommerce\\src\\redux\\seller_products\\sellerProductsTypes.js":"35","E:\\FYP\\geo-ecommerce\\src\\redux\\seller_products\\sellerProductsReducer.js":"36","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\your_store_tab\\index.js":"37"},{"size":984,"mtime":1613876971182,"results":"38","hashOfConfig":"39"},{"size":362,"mtime":499162500000,"results":"40","hashOfConfig":"39"},{"size":2741,"mtime":1614151581216,"results":"41","hashOfConfig":"39"},{"size":8012,"mtime":1613457134528,"results":"42","hashOfConfig":"39"},{"size":489,"mtime":1609170101502,"results":"43","hashOfConfig":"39"},{"size":9068,"mtime":1613457274924,"results":"44","hashOfConfig":"39"},{"size":189,"mtime":1613804706930,"results":"45","hashOfConfig":"39"},{"size":9003,"mtime":1613478682582,"results":"46","hashOfConfig":"39"},{"size":1497,"mtime":1613050890450,"results":"47","hashOfConfig":"39"},{"size":5801,"mtime":1613278285560,"results":"48","hashOfConfig":"39"},{"size":214,"mtime":1609678318417,"results":"49","hashOfConfig":"39"},{"size":2427,"mtime":1613478477637,"results":"50","hashOfConfig":"39"},{"size":5609,"mtime":1613819246441,"results":"51","hashOfConfig":"39"},{"size":2284,"mtime":1613289233610,"results":"52","hashOfConfig":"39"},{"size":117,"mtime":1613046848940,"results":"53","hashOfConfig":"39"},{"size":681,"mtime":1613237633241,"results":"54","hashOfConfig":"39"},{"size":1370,"mtime":1614054162699,"results":"55","hashOfConfig":"39"},{"size":3751,"mtime":1613456069720,"results":"56","hashOfConfig":"39"},{"size":733,"mtime":1613455867115,"results":"57","hashOfConfig":"39"},{"size":95,"mtime":1613803088148,"results":"58","hashOfConfig":"39"},{"size":4069,"mtime":1613805436139,"results":"59","hashOfConfig":"39"},{"size":352,"mtime":1612982271600,"results":"60","hashOfConfig":"39"},{"size":246,"mtime":1612982285492,"results":"61","hashOfConfig":"39"},{"size":2380,"mtime":1613289054634,"results":"62","hashOfConfig":"39"},{"size":1419,"mtime":1613478621826,"results":"63","hashOfConfig":"39"},{"size":143,"mtime":1613393474778,"results":"64","hashOfConfig":"39"},{"size":498,"mtime":1613395638186,"results":"65","hashOfConfig":"39"},{"size":957,"mtime":1614012437554,"results":"66","hashOfConfig":"39"},{"size":541,"mtime":1613878631340,"results":"67","hashOfConfig":"39"},{"size":9561,"mtime":1614152896216,"results":"68","hashOfConfig":"39"},{"size":646,"mtime":1613809541941,"results":"69","hashOfConfig":"39"},{"size":3009,"mtime":1613805462798,"results":"70","hashOfConfig":"39"},{"size":3797,"mtime":1613839397989,"results":"71","hashOfConfig":"39"},{"size":4955,"mtime":1614153334703,"results":"72","hashOfConfig":"39"},{"size":1115,"mtime":1614149879431,"results":"73","hashOfConfig":"39"},{"size":5950,"mtime":1614150282961,"results":"74","hashOfConfig":"39"},{"size":10313,"mtime":1614155350435,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1l58w15",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"78"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"78"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"78"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"78"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"78"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"78"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"78"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"78"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"78"},"E:\\FYP\\geo-ecommerce\\src\\index.js",[],["168","169"],"E:\\FYP\\geo-ecommerce\\src\\reportWebVitals.js",[],"E:\\FYP\\geo-ecommerce\\src\\App.js",["170","171","172"],"import logo from './logo.svg';\nimport './App.css';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { message } from 'antd';\nimport Routes from './routes';\nimport { getToken } from './utils/storage';\nimport { getAllSellerProducts } from './redux';\n\nfunction App() {\n  // const UserRoutes = () => {\n  //   return (\n  //     <div>\n  //       <Navbar />\n  //       <LandingPage />\n  //     </div>\n  //   );\n  // };\n\n  const dispatch = useDispatch();\n\n  const userId = useSelector(state => state.user.user?.user_id);\n  const addingSellerProductsSuccess = useSelector(state => state.addSellerProducts?.addingSellerProductsSuccess);  \n  \n  //Get Seller All Product Details\n  useEffect(() => {    \n    dispatch(getAllSellerProducts(userId));\n  }, [userId, addingSellerProductsSuccess]);\n\n  return (\n    <Switch>\n      {/* <Route path=\"/users/login\" exact component={LoginPage}>\n      </Route>\n      <Route path=\"/users/register\" exact component={RegisterUser}>\n      </Route>\n      <Route path=\"/\" exact component={UserRoutes}></Route>\n      <Route path=\"*\" render={() => {\n        return (\n          <h2>Page Not Found</h2>\n        )\n      }}>\n      </Route> */}\n      {Routes.map((\n        {\n          name,\n          path,\n          privateRoute,\n          exact,\n          displaySearchBar,\n          layout: Layout,\n          component: Component\n        },\n        i\n      ) => {\n        if (privateRoute) {\n          return (\n            <Route\n              key={`${path}_${i}`}\n              path={path}\n              exact={exact}\n              render={(props) => {\n                if (!getToken()) {\n                  message.info({\n                    content: \"You must login to view this page!\",\n                  });\n                  return <Redirect to=\"/\"></Redirect>\n                } else {\n                  return (\n                    <Layout {...props}>\n                      <Component {...props}></Component>\n                    </Layout>\n                  )\n                }\n              }}\n            >\n            </Route>\n          )\n        } else {\n          return (\n            <Route\n              key={`${path}_${i}`}\n              path={path}\n              exact={exact}\n              render={(props) => {\n                // console.log(props);\n                return (\n                  <Layout displaySearchBar={displaySearchBar} {...props}>\n                    <Component {...props}></Component>\n                  </Layout>\n                )\n              }\n              }\n            ></Route>\n          )\n        }\n      })}\n    </Switch >\n  );\n}\n\nexport default App;\n","E:\\FYP\\geo-ecommerce\\src\\pages\\login\\index.jsx",["173","174","175","176"],"import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Redirect, withRouter, useHistory } from 'react-router-dom';\r\nimport { Layout, Row, Col, Form, Input, Checkbox, Button, Divider, Image, Alert } from 'antd';\r\nimport { Content, Footer, Header } from 'antd/lib/layout/layout';\r\nimport { CustomizedButton, CustomGoogleLoginBtn } from '../../components/login_sign_up_components';\r\nimport { LeftOutlined, EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\nimport logo from '../../assests/images/logo.png'\r\nimport { google_client_id } from '../../config';\r\nimport { getToken } from '../../utils/storage';\r\n// import history  from '../../utils/history';\r\n\r\n//User Actions\r\nimport { loginUser, onUserErrorReset } from '../../redux';\r\n\r\nconst LoginUserPage = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const dispatch = useDispatch();\r\n    const loggingUser = useSelector(state => state.user?.loggingIn);\r\n    const userDetail = useSelector(state => state.user?.user);\r\n    const loggingErrorMsg = useSelector(state => state.user?.loggingError);\r\n\r\n    //Reset Errors\r\n    useEffect(()=>{\r\n        dispatch(onUserErrorReset());\r\n    },[]);\r\n\r\n    //Google Sign Up Response\r\n    const responseGoogle = (response) => {\r\n        const googleResponse = response.profileObj;\r\n        const googleFormValues = {\r\n            firstName: googleResponse.name,\r\n            email: googleResponse.email,\r\n            googleId: googleResponse.googleId,\r\n            type: \"googleAuth\"\r\n        }\r\n        dispatch(loginUser(googleFormValues, history));\r\n    }\r\n\r\n    const responseGoogleFailure = (response) => {\r\n        console.log('Failed: ', response);\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        dispatch(loginUser(values, history));\r\n    }\r\n\r\n    //Redirect to Landing if already Logged In    \r\n    useEffect(() => {\r\n        if (getToken()) {\r\n            history.push(\"/\");\r\n        }\r\n    }, [userDetail]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Layout >\r\n                <Header style={{ background: \"#fff\" }}>\r\n                    <Row>\r\n                        <Col span={8}>\r\n                            <CustomizedButton onClick={() => history.push(\"/\")}><LeftOutlined />Back</CustomizedButton>\r\n                        </Col>\r\n                        <Col span={8} offset={8} style={{ textAlign: \"end\" }}>\r\n                            <CustomizedButton><Link to=\"/users/register\">CREATE ACCOUNT</Link></CustomizedButton>\r\n                        </Col>\r\n                    </Row>\r\n                </Header>\r\n                <Content >\r\n                    <Row justify=\"center\" align=\"middle\" className=\"main-content\" style={{ flexDirection: \"column\", minHeight: \"90vh\" }}>\r\n                        <Row>\r\n                            <Image\r\n                                width={100}\r\n                                src={logo}\r\n                            >\r\n                            </Image>\r\n                        </Row>\r\n                        <Row>\r\n                            <h2>Log into Saman.com</h2>\r\n                        </Row>\r\n                        {loggingErrorMsg && (\r\n                            <Alert\r\n                                type=\"error\"\r\n                                message={loggingErrorMsg}\r\n                                closable\r\n                            />\r\n                        )}\r\n                        <Row style={{ width: \"100vw\", paddingTop: \"1rem\" }}>\r\n                            <Col md={{ span: 8 }} offset={3}>\r\n                                <Form\r\n                                    labelCol={{ span: 8 }}\r\n                                    wrapperCol={{ span: 16 }}\r\n                                    name=\"loginForm\"\r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <Form.Item\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        rules={[{ required: true, message: \"Please Enter Email!\" }]}\r\n                                    >\r\n                                        <Input />\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"Password\"\r\n                                        name=\"password\"\r\n                                        rules={[{ required: true, message: \"Please Enter Password!\" }]}\r\n                                    >\r\n                                        <Input.Password\r\n                                            iconRender={visible => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r\n                                        >\r\n                                        </Input.Password>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        style={{ textAlign: \"center\" }}\r\n                                        wrapperCol={{\r\n                                            xs: { offset: 0, span: 16 },\r\n                                            md: { offset: 8, span: 16 },\r\n                                        }}\r\n                                        name=\"logIn\"\r\n                                    >\r\n                                        <Button\r\n                                            type=\"primary\"\r\n                                            htmlType=\"submit\"\r\n                                            style={{ width: \"50%\" }}\r\n                                            loading={loggingUser}\r\n                                        >Log In</Button>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        style={{ textAlign: \"center\" }}\r\n                                        wrapperCol={{\r\n                                            xs: { offset: 0, span: 16 },\r\n                                            md: { offset: 8, span: 16 },\r\n                                        }}\r\n                                        valuePropName=\"checked\"\r\n                                        name=\"rememberMe\"\r\n                                    >\r\n                                        <Checkbox>Remember Me</Checkbox>\r\n                                    </Form.Item>\r\n\r\n                                </Form>\r\n                            </Col>\r\n                            <Col xs={{ span: 24 }} md={{ span: 2 }} style={{ textAlign: \"center\", padding: \"2.3rem 0\" }}>\r\n                                <Divider type=\"vertical\" style={{ height: \"50%\", 'backgroundColor': \"#616362\" }}></Divider>\r\n                                <span>OR</span>\r\n                            </Col>\r\n                            <Col xs={{\r\n                                span: 24\r\n                            }}\r\n                                md={{\r\n                                    span: 8\r\n                                }}\r\n                                style={{ padding: \"1.4rem 0\", }}\r\n                            >\r\n                                <CustomGoogleLoginBtn\r\n                                    clientId={google_client_id}\r\n                                    buttonText=\"Continue With Google\"\r\n                                    onSuccess={responseGoogle}\r\n                                    onFailure={responseGoogleFailure}\r\n                                    cookiePolicy={'single_host_origin'}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Row>\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>\r\n                    <span dangerouslySetInnerHTML={{ \"__html\": \"&copySaman.com\" }}></span>\r\n                </Footer>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\nexport default LoginUserPage;","E:\\FYP\\geo-ecommerce\\src\\components\\login_sign_up_components\\index.js",[],"E:\\FYP\\geo-ecommerce\\src\\pages\\register\\index.jsx",["177","178","179"],"import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useHistory, Redirect } from 'react-router-dom';\r\nimport Layout, { Header, Content, Footer } from 'antd/lib/layout/layout';\r\nimport { Row, Col, Form, Input, Divider, Image, Button, Alert } from 'antd';\r\nimport { LeftOutlined, EyeOutlined, EyeInvisibleOutlined } from '@ant-design/icons';\r\nimport { CustomizedButton, CustomGoogleLoginBtn } from '../../components/login_sign_up_components';\r\nimport { google_client_id } from '../../config';\r\nimport logo from '../../assests/images/logo.png';\r\nimport { getToken } from '../../utils/storage';\r\n\r\n//Actions\r\nimport { registerUser,onUserErrorReset } from '../../redux';\r\n\r\nconst RegisterUserPage = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const registeringUser = useSelector(state => state.user?.registeringUser);\r\n    const registerErrorMsg = useSelector(state => state.user?.registrationError);\r\n\r\n    //Reset Errors\r\n    useEffect(()=>{\r\n        dispatch(onUserErrorReset());\r\n    },[]);\r\n\r\n    //Google Sign Up Response\r\n    const responseGoogle = (response) => {        \r\n        const googleResponse=response.profileObj;\r\n        const googleFormValues={\r\n            firstName:googleResponse.name,\r\n            email:googleResponse.email,\r\n            googleId:googleResponse.googleId,\r\n            type:\"googleAuth\"      \r\n        }\r\n        dispatch(registerUser(googleFormValues, history));\r\n    }\r\n\r\n    const responseGoogleFailure=(response)=>{\r\n        console.log('Failed: ',response);\r\n    }\r\n\r\n    const onFinish = (values) => {\r\n        const formValues = {\r\n            firstName: values.firstName,\r\n            lastName: values.lastName,\r\n            email: values.registerEmail,\r\n            password: values.registerPassword,\r\n            confirm_password: values.registerConfirmPassword,            \r\n        }\r\n        dispatch(registerUser(formValues, history));\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo) => {\r\n        console.log('Failed: ', errorInfo);\r\n    };\r\n\r\n    //Redirect to Landing if already Logged In    \r\n    useEffect(() => {\r\n        if (getToken()) {\r\n            history.push(\"/\");\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <Layout>\r\n                <Header style={{ background: \"#fff\" }}>\r\n                    <Row>\r\n                        <Col xs={{ span: 2 }} md={{ span: 8 }}>\r\n                            <CustomizedButton onClick={() => history.push(\"/\")}><LeftOutlined />Back</CustomizedButton>\r\n                        </Col>\r\n                        <Col xs={{ span: 4, offset: 6 }} md={{ span: 8, offset: 8 }} style={{ textAlign: \"end\" }}>\r\n                            <CustomizedButton><Link to=\"/users/login\">Already have an account? Log In</Link></CustomizedButton>\r\n                        </Col>\r\n                    </Row>\r\n                </Header>\r\n                <Content>\r\n                    <Row justify=\"center\" align=\"middle\" className=\"main-content\" style={{ flexDirection: \"column\", minHeight: \"90vh\" }}>\r\n                        <Row>\r\n                            <Image\r\n                                width={100}\r\n                                src={logo}\r\n                            >\r\n                            </Image>\r\n                        </Row>\r\n                        <Row>\r\n                            <h2>Sign Up</h2>\r\n                        </Row>\r\n                        {registerErrorMsg && (\r\n                            <Alert\r\n                                message={registerErrorMsg}\r\n                                type=\"error\"\r\n                                closable\r\n                            />\r\n                        )}\r\n                        <Row gutter={24} style={{ width: \"100%\", paddingTop: \"1rem\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\" }} >\r\n                            <Col md={{ span: 8 }} >\r\n                                <Form\r\n                                    labelCol={{ span: 8 }}\r\n                                    wrapperCol={{ span: 16 }}\r\n                                    onFinish={onFinish}\r\n                                    onFinishFailed={onFinishFailed}\r\n                                >\r\n                                    <Form.Item\r\n                                        label=\"First Name\"\r\n                                        name=\"firstName\"\r\n                                        rules={[{ required: true, message: \"Please Enter Your First Name!\" }]}\r\n                                    >\r\n                                        <Input></Input>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"Last Name\"\r\n                                        name=\"lastName\"\r\n                                        rules={[{ required: true, message: \"Please Enter Your Last Name!\" }]}\r\n                                    >\r\n                                        <Input></Input>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"Email\"\r\n                                        name=\"registerEmail\"\r\n                                        rules={[{ required: true, message: \"Please Enter Email!\" }]}\r\n                                    >\r\n                                        <Input></Input>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"Password\"\r\n                                        name=\"registerPassword\"\r\n                                        rules={[{ required: true, message: \"Please Enter Password!\" }]}\r\n                                    >\r\n                                        <Input.Password\r\n                                            iconRender={visible => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r\n                                        >\r\n                                        </Input.Password>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        label=\"Confirm Password\"\r\n                                        name=\"registerConfirmPassword\"\r\n                                        rules={[{ required: true, message: \"Please Enter Password!\" }]}\r\n                                    >\r\n                                        <Input.Password\r\n                                            iconRender={visible => (visible ? <EyeOutlined /> : <EyeInvisibleOutlined />)}\r\n                                        >\r\n                                        </Input.Password>\r\n                                    </Form.Item>\r\n                                    <Form.Item\r\n                                        name=\"signUp\"\r\n                                        wrapperCol={{\r\n                                            xs: { offset: 0, span: 16 },\r\n                                            md: { offset: 8, span: 16 }\r\n                                        }}\r\n                                        style={{ textAlign: \"center\" }}\r\n                                    >\r\n                                        <Button\r\n                                            type=\"primary\"\r\n                                            htmlType=\"submit\"\r\n                                            style={{ width: \"50%\" }}\r\n                                            loading={registeringUser}\r\n                                        >Sign Up\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Col>\r\n                            <Col xs={{ span: 24 }} md={{ span: 2 }} style={{textAlign: \"center\",}} align=\"middle\">\r\n                                <Divider type=\"vertical\" style={{ height: \"50%\", 'backgroundColor': \"#616362\" }}></Divider>\r\n                                <span>OR</span>\r\n                            </Col>\r\n                            <Col md={{ span: 8 }}>\r\n                                <CustomGoogleLoginBtn\r\n                                    clientId={google_client_id}\r\n                                    buttonText=\"Sign Up With Google\"\r\n                                    onSuccess={responseGoogle}\r\n                                    onFailure={responseGoogleFailure}\r\n                                    cookiePolicy={'single_host_origin'}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n\r\n                    </Row>\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>\r\n                    <span dangerouslySetInnerHTML={{ \"__html\": \"&copySaman.com\" }}></span>\r\n                </Footer>\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegisterUserPage;","E:\\FYP\\geo-ecommerce\\src\\config.js",[],"E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\index.js",["180","181"],"import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Link, Redirect, useHistory } from 'react-router-dom';\r\nimport SearchBar from './search_bar';\r\nimport { NavBarDiv, NavBarMenu, MenuItem, DropDownMenuDiv, UserDropDownMenuDiv, LogoutButton } from './style';\r\nimport { Row, Col, Dropdown, Divider, Image } from 'antd';\r\nimport { DownOutlined, SmileOutlined, UserOutlined } from '@ant-design/icons'\r\nimport { NavbarItems, UserProfileItems } from './navbar_items';\r\nimport { getToken } from '../../utils/storage';\r\nimport { Fragment } from 'react';\r\nimport { logoutUser } from '../../redux';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport logo from '../../assests/images/logo.png';\r\n\r\nconst Navbar = ({ displaySearchBar }) => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const User = useSelector(state => state.user?.user);\r\n    const fullName = `${User?.first_name} ${User?.last_name ? User?.last_name : \"\"}`;\r\n\r\n    const onLogout = () => {\r\n        dispatch(logoutUser(history));\r\n    }\r\n\r\n    const DropDownMenu = (props) => {\r\n        return (\r\n            <DropDownMenuDiv>\r\n                {\r\n                    (props.subMenu && props.subMenu.length > 0)\r\n                        ? props.subMenu.map(({ name, label, path }) => {\r\n                            return (\r\n                                <NavBarMenu>\r\n                                    <MenuItem\r\n                                        key={name}\r\n                                    >\r\n                                        {label}\r\n                                    </MenuItem>\r\n                                </NavBarMenu>\r\n                            )\r\n                        }) :\r\n                        \"\"\r\n                }\r\n            </DropDownMenuDiv>\r\n        )\r\n    }\r\n\r\n    const UserDropDownMenu = () => {\r\n        return (\r\n            <UserDropDownMenuDiv>\r\n                <Row className=\"userMenuLabel\">\r\n                    <h4><b>{fullName}</b></h4>\r\n                </Row>\r\n                <Row className=\"userMenuLabel userMenuEmail\">\r\n                    <p>{User?.email}</p>\r\n                </Row>\r\n                <Divider style={{ margin: \"2px 0px\" }} />\r\n                <Row>\r\n                    <LogoutButton\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            onLogout()\r\n                        }}\r\n                    >\r\n                        Log out\r\n                    </LogoutButton>\r\n                </Row>\r\n            </UserDropDownMenuDiv>\r\n        )\r\n    }\r\n\r\n    //Return Main Component\r\n    return (\r\n        <NavBarDiv id=\"navBarDiv\">\r\n            <Row gutter={24}>\r\n                <Col\r\n                    md={{ span: 3, offset: 1 }}\r\n                    xl={{ span: 3, offset: 1 }}\r\n                >\r\n\r\n                    {/* Conditional Search Bar Rendering */}\r\n\r\n                    {displaySearchBar ?\r\n                        (\r\n                            <div style={{ padding: \"1rem\" }}>\r\n\r\n                                <div>\r\n                                    <SearchBar></SearchBar>\r\n                                </div>\r\n                                <div>\r\n                                    Search\r\n                        </div>\r\n\r\n                            </div>\r\n                        )\r\n                        :\r\n                        (\r\n                            <div style={{ padding: \"1rem\" }}>\r\n                                <Link to=\"/\">\r\n                                    <Image src={logo}\r\n                                        width=\"80%\"\r\n                                        alt=\"Logo.png\"\r\n                                        onClick={() => {\r\n                                            <Redirect to=\"/\"></Redirect>\r\n                                        }}\r\n                                        preview={false}\r\n                                    />\r\n                                </Link>\r\n                            </div>\r\n\r\n                        )\r\n                    }\r\n\r\n\r\n                </Col>\r\n                <Col\r\n                    md={{ span: 8 }}\r\n                    xl={{ span: 14 }}\r\n                >\r\n                    <Row style={{ display: \"flex\", flexDirection: \"column\", textAlign: \"center\" }}>\r\n                        <Col>\r\n                            <h2>Saman.com</h2>\r\n                            {/* <Image\r\n                                width={100}\r\n                                src={logo}\r\n                            >\r\n                            </Image> */}\r\n                        </Col>\r\n                        <Col>\r\n                            <NavBarMenu\r\n                                mode=\"horizontal\"\r\n                            >\r\n                                {NavbarItems.map(({ name, label, subMenu, path }) =>\r\n                                    subMenu ?\r\n                                        (\r\n                                            <Dropdown\r\n                                                overlay={<DropDownMenu subMenu={subMenu}></DropDownMenu>}\r\n                                            >\r\n\r\n                                                <a className=\"nav-bar-anchor\">\r\n                                                    <div>{label}<DownOutlined /></div>\r\n\r\n                                                </a>\r\n\r\n\r\n                                            </Dropdown>\r\n                                        )\r\n                                        :\r\n                                        (\r\n                                            <MenuItem\r\n                                                key={name}\r\n                                            >\r\n                                                <Link to={path}>\r\n                                                    <h3>{label}</h3>\r\n                                                </Link>\r\n\r\n                                            </MenuItem>\r\n                                        )\r\n\r\n                                )}\r\n                            </NavBarMenu>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Col>\r\n                <Col\r\n                    md={{ span: 8 }}\r\n                    xl={{ span: 4, offset: 1 }}\r\n                    style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-between\", zIndex: \"999\", padding: \"1rem\", textAlign: \"center\" }}\r\n                >\r\n                    <div>\r\n                        <div>\r\n                            <SmileOutlined style={{ fontSize: \"2.5rem\" }} />\r\n                        </div>\r\n                        <div>\r\n                            Rating\r\n                        </div>\r\n                    </div>\r\n                    {getToken() ?\r\n                        (\r\n                            UserProfileItems.map(({ name, label }) => {\r\n                                return (\r\n                                    <Fragment>\r\n                                        <Dropdown\r\n                                            overlay={<UserDropDownMenu />}\r\n                                            trigger={['click']}\r\n                                            style={{\r\n                                                pointer: \"cursor\"\r\n                                            }}\r\n                                        >\r\n                                            <div>\r\n                                                <div>\r\n                                                    <UserOutlined style={{\r\n                                                        fontSize: \"2.5rem\",\r\n                                                    }} />\r\n                                                </div>\r\n                                                <a className=\"nav-bar-anchor\" style={{ color: \"black\" }}>Profile</a>\r\n                                            </div>\r\n\r\n                                        </Dropdown>\r\n\r\n                                    </Fragment>\r\n                                )\r\n                            })\r\n                        )\r\n                        :\r\n                        (\r\n                            <div>\r\n                                <Link to=\"/users/register\" className=\"nav-bar-anchor\" style={{ color: \"black\" }}>\r\n                                    <div>\r\n                                        <i className=\"fa fa-hand-paper-o\" style={{ fontSize: \"2.5rem\" }}></i>\r\n                                    </div>\r\n                                    <div>\r\n                                        Sign Up/Register\r\n                                    </div>\r\n                                </Link>\r\n\r\n                            </div>\r\n                        )\r\n\r\n                    }\r\n\r\n\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n        </NavBarDiv>\r\n    )\r\n}\r\n\r\nexport default Navbar;","E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\style.js",["182"],"import styled from 'styled-components';\r\nimport {Menu, Dropdown, Button} from 'antd';\r\nimport {SearchOutlined} from '@ant-design/icons';\r\n\r\nexport const NavBarDiv=styled.div`\r\n    z-index: 999;\r\n    position: relative;\r\n    width:100vw;\r\n    justify-content:center;\r\n    background-color:rgba(255,255,255,0.2);    \r\n    perspective:1000px;\r\n    margin:0 auto;\r\n \r\n`\r\n\r\nexport const NavBarMenu=styled(Menu)`\r\n    display:flex;  \r\n    justify-content:space-between;\r\n    .nav-bar-anchor{\r\n        color:black;\r\n        &:active{\r\n            color:black;\r\n        }\r\n    }\r\n`\r\nexport const MenuItem=styled(Menu.Item)`\r\n\r\n`\r\nexport const SearchOutlinedEl=styled(SearchOutlined)`\r\n    font-size:2.5rem;   \r\n`\r\n\r\nexport const DropDownMenuDiv=styled.div`\r\n    margin-left:-3rem;\r\n    display:grid;\r\n    grid-template-columns:auto auto;    \r\n    grid-column-gap: 20px;    \r\n    padding:10px;\r\n    border:1px solid grey;\r\n`\r\n\r\nexport const UserDropDownMenuDiv=styled.div`\r\n    margin-left:-5rem;    \r\n    padding:10px 12px;\r\n    border-radius:0.01rem;\r\n    background-color:rgb(255, 255, 255);\r\n    /* border:none */\r\n    box-shadow: 1px 2px 40px #888888;\r\n    .userMenuLabel{\r\n        margin-right:6rem;        \r\n    }\r\n    .userMenuEmail{\r\n        color:rgb(172, 172, 172);\r\n        font-size:500;\r\n        font-size:0.75rem;\r\n        margin-top:-0.5rem;\r\n    }\r\n`\r\n\r\nexport const LogoutButton=styled(Button)`\r\n    border:none;\r\n    padding-left:0px;\r\n    font-weight:600;\r\n    color:chocolate;\r\n    \r\n`","E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\index.js",["183","184","185"],"import React, { useEffect, useRef } from 'react';\r\nimport { Row, Col, Layout } from 'antd';\r\nimport { Content } from 'antd/lib/layout/layout';\r\nimport { WelcomeDiv, PCBackgroundImg, RightBackGround, LandingRightColumn } from './style';\r\nimport pcBackgroundImg from '../../assests/images/pcBackgroundImg.jpg';\r\nimport $ from 'jquery';\r\nimport { DownCircleFilled } from '@ant-design/icons';\r\n\r\nimport HowSamanWorksDiv from './components/how_saman_works_info';\r\nimport BuySellInformation from './components/buy_sell_info';\r\n\r\nconst LandingPage = () => {\r\n\r\n    //Animation Div Ref\r\n    const landingRightColumnElement = useRef(null);\r\n    const totalDegreesToRotateLandingRightDiv = 20;\r\n    const totalDegreesToRotateLandingBuySellDiv = 40;\r\n\r\n    useEffect(() => {\r\n        const handleScroll = (event) => {\r\n            let innerHeightValue = $(\"#landingRightColumnDiv\").innerHeight() / 2;\r\n            const landingRightDivDegreesToRotate = calculateRotation(innerHeightValue, totalDegreesToRotateLandingRightDiv);\r\n            const landingBuySellDivDegreesToRotate = calculateRotation(innerHeightValue, totalDegreesToRotateLandingBuySellDiv);\r\n\r\n            if (landingRightDivDegreesToRotate <= totalDegreesToRotateLandingRightDiv && landingRightDivDegreesToRotate >= 0) {\r\n\r\n                $(\"#landingRightColumnDiv\").css({\r\n                    \"transform\": `rotate(${totalDegreesToRotateLandingRightDiv - landingRightDivDegreesToRotate}deg)`\r\n                });\r\n\r\n\r\n            } else {\r\n                $(\"#landingRightColumnDiv\").css({\r\n                    \"transform\": `rotate(0deg)`\r\n                });\r\n\r\n            }\r\n\r\n            if (landingBuySellDivDegreesToRotate < totalDegreesToRotateLandingBuySellDiv ) {\r\n                $(\".landingBuySellDiv\").css({\r\n                    \"transform\": `rotate(${totalDegreesToRotateLandingBuySellDiv - landingBuySellDivDegreesToRotate}deg)`\r\n                });\r\n\r\n            } else {\r\n                $(\".landingBuySellDiv\").css({\r\n                    \"transform\": `rotate(0deg)`\r\n                });\r\n            }\r\n\r\n            //Animation\r\n            // console.log(getRotationDegree($(\"#landingRightColumnDiv\")));\r\n\r\n        }\r\n\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        // window.addEventListener(\"DOMContentLoaded\", handleScroll);\r\n    }, []);\r\n\r\n    const calculateRotation = (innerHeightValue, totalDegreesToRotate) => {\r\n        // let innerHightValue = document.documentElement.offsetHeight/2;\r\n        // let innerHightValue = $(\"#landingRightColumnDiv\")[0].scrollHeight/2;\r\n        let oneDegreePixelValue = innerHeightValue / totalDegreesToRotate;\r\n        let onePixelDegree = 1 / oneDegreePixelValue;\r\n        // console.log(onePixelDegree);\r\n        let degreesToRotate = totalDegreesToRotate;\r\n        let marginToDecrease = window.scrollY * onePixelDegree;\r\n        // console.log(\"scrollY\", window.scrollY);\r\n        // console.log(\"scroll Height\", $(\"#landingRightColumnDiv\")[0].scrollHeight);\r\n        // console.log(\"scrollY\", window.scrollY);\r\n        // console.log(document.documentElement.offsetHeight);\r\n\r\n        $(\"#landingRightBackgroundDiv\").css({\r\n            \"right\": `-${marginToDecrease * 1.2}%`\r\n        })\r\n        // console.log(\"inner Height\", $(\"#landingRightColumnDiv\").innerHeight());\r\n\r\n        degreesToRotate = window.scrollY * onePixelDegree;\r\n\r\n\r\n\r\n        return degreesToRotate;\r\n\r\n    }\r\n\r\n    const getRotationDegree = (elementObj) => {\r\n        var matrix = elementObj.css(\"-webkit-transform\") ||\r\n            elementObj.css(\"-moz-transform\") ||\r\n            elementObj.css(\"-ms-transform\") ||\r\n            elementObj.css(\"-o-transform\") ||\r\n            elementObj.css(\"transform\");\r\n        if (matrix !== 'none') {\r\n            var values = matrix.split('(')[1].split(')')[0].split(',');\r\n            var a = values[0];\r\n            var b = values[1];\r\n            var angle = Math.round(Math.atan2(b, a) * (180 / Math.PI));\r\n        } else { var angle = 0; }\r\n\r\n        if (angle < 0) angle += 360;\r\n        return angle;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Layout style={{\r\n                backgroundColor: \"white\"\r\n            }}\r\n            >\r\n                <Content>\r\n                    <Row gutter={24} style={{ textAlign: \"center\" }}>\r\n                        <Col md={{ span: 6, offset: 3 }}>\r\n                            <WelcomeDiv>\r\n                                <div>\r\n                                    Welcome To\r\n                                </div>\r\n                                <div>\r\n                                    Saman.com\r\n                                </div>\r\n                                <div className=\"welcome-div-text\">\r\n                                    A place where you can buy new and old products and we also give you free online selling platform.\r\n                                </div>\r\n                            </WelcomeDiv>\r\n\r\n                        </Col>\r\n                        <Col md={{ span: 11, offset: 1 }}>\r\n                            <LandingRightColumn ref={landingRightColumnElement} id=\"landingRightColumnDiv\">\r\n                                <RightBackGround id=\"landingRightBackgroundDiv\">\r\n                                </RightBackGround>\r\n                                <PCBackgroundImg\r\n                                    src={pcBackgroundImg}\r\n                                >\r\n                                </PCBackgroundImg>\r\n\r\n                            </LandingRightColumn>\r\n\r\n                        </Col>\r\n                    </Row>                    \r\n                    <BuySellInformation />\r\n                    <HowSamanWorksDiv />\r\n                </Content>\r\n            </Layout>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LandingPage;","E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\search_bar.js",[],"E:\\FYP\\geo-ecommerce\\src\\components\\nav_bar\\navbar_items.js",[],"E:\\FYP\\geo-ecommerce\\src\\enums\\index.js",[],"E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\style.js",[],"E:\\FYP\\geo-ecommerce\\src\\utils\\history.js",[],"E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\components\\buy_sell_info.js",[],"E:\\FYP\\geo-ecommerce\\src\\redux\\store.js",["186","187"],"import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport { reducer as UserReducer }  from './user/userReducer';\r\nimport {reducer as AddSellerProductsReducer, sellerAllProductsReducer as SellerAllProductsReducer} from './seller_products/sellerProductsReducer';\r\nimport thunk from 'redux-thunk';\r\nimport {persistStore, persistReducer} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\r\nimport { Select } from 'antd';\r\n \r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,  \r\n  blacklist: [\r\n    // 'user',\r\n    \"addSellerProducts\"\r\n  ],\r\n}\r\n\r\nconst rootReducer=combineReducers({\r\n    user:UserReducer,  \r\n    addSellerProducts:AddSellerProductsReducer,\r\n    sellerAllProducts:SellerAllProductsReducer\r\n});\r\n\r\n//Persist Store to LocalStorage\r\nconst persistedReducer=persistReducer(persistConfig,rootReducer);\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   \r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\n\r\nconst store=createStore(persistedReducer,composeEnhancers(applyMiddleware(thunk)));\r\n\r\nexport default () => {  \r\n  let persistor = persistStore(store)\r\n  return { store, persistor }\r\n}\r\n","E:\\FYP\\geo-ecommerce\\src\\redux\\user\\userReducer.js",["188","189","190","191"],"import reduceReducers from 'reduce-reducers';\r\n\r\nimport {\r\n    USER_REGISTER,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_ERROR,\r\n    USER_REGISTER_RESET,\r\n    USER_LOGIN,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_ERROR,\r\n    USER_LOGOUT,\r\n    USER_LOGOUT_SUCCESS,\r\n    FETCH_USER,\r\n    FETCH_USER_SUCCESS,\r\n    FETCH_USER_ERROR,\r\n    USER_ERROR_RESET\r\n} from './userTypes';\r\n\r\nconst initialState = {\r\n    //Register User\r\n    registeringUser: false,\r\n    registrationSuccess: null,\r\n    registrationError: null,\r\n\r\n    //Logging State\r\n    loggingIn: false,\r\n    loggingError: null,\r\n\r\n    //Fetching User\r\n    gettingUser: false,\r\n    user: null,\r\n    gettingUserError: null\r\n}\r\n\r\nconst userRegisterReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case USER_REGISTER:\r\n            return {\r\n                ...state,\r\n                registeringUser: true,\r\n                registrationSuccess: null,\r\n                registrationError: null\r\n            }\r\n        case USER_REGISTER_SUCCESS:\r\n            //User Response\r\n            const User=action?.payload;            \r\n            return {\r\n                ...state,\r\n                registeringUser: false,\r\n                user: {\r\n                    user_id:User.user_id,\r\n                    first_name:User.first_name,\r\n                    last_name:User.last_name,\r\n                    email:User.email\r\n                },\r\n                registrationError: null\r\n            }\r\n        case USER_REGISTER_ERROR:\r\n            return {\r\n                ...state,\r\n                registeringUser: false,\r\n                registrationSuccess: null,\r\n                registrationError: action?.payload\r\n            }\r\n        case USER_REGISTER_RESET:\r\n            return{\r\n                ...state,\r\n                registeringUser: false,\r\n                registrationSuccess: null,\r\n                registrationError: null\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst userLoginReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case USER_LOGIN:\r\n            return {\r\n                ...state,\r\n                loggingIn: true,\r\n                loggingError: null\r\n            }\r\n        case USER_LOGIN_SUCCESS:\r\n            const User=action?.payload;\r\n            return {\r\n                ...state,\r\n                loggingIn: false,\r\n                user: {\r\n                    user_id:User.user_id,\r\n                    first_name:User.first_name,\r\n                    last_name:User.last_name,\r\n                    email:User.email\r\n                },\r\n                loggingError: null\r\n            }\r\n        case USER_LOGIN_ERROR:\r\n            return {\r\n                ...state,\r\n                loggingIn: false,\r\n                user: null,\r\n                loggingError: action?.payload\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}\r\n\r\nconst userLogoutReducer=(state=initialState,action)=>{\r\n    switch (action.type) {\r\n        case USER_LOGOUT_SUCCESS:\r\n            return{\r\n                ...state,\r\n                loggingIn: false,\r\n                user: null,\r\n                loggingError: null\r\n            }            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst userErrorReset=(state=initialState,action)=>{\r\n    switch (action.type) {\r\n        case USER_ERROR_RESET:\r\n            return{\r\n                ...state,\r\n                loggingError: null,\r\n                registrationError: null\r\n            }\r\n            \r\n    \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const reducer = reduceReducers(userRegisterReducer, userLoginReducer, userLogoutReducer,userErrorReset);","E:\\FYP\\geo-ecommerce\\src\\redux\\user\\userTypes.js",[],"E:\\FYP\\geo-ecommerce\\src\\redux\\index.js",[],"E:\\FYP\\geo-ecommerce\\src\\redux\\user\\userActions.js",["192","193","194","195","196"],"import axios from 'axios';\r\nimport { API_URL } from '../../config';\r\nimport { setAuthHeaders, removeAuthHeaders } from '../../services/auth';\r\nimport { removeToken } from '../../utils/storage';\r\n// import history from '../../utils/history';\r\nimport {\r\n    FETCH_USER,\r\n    FETCH_USER_SUCCESS,\r\n    FETCH_USER_ERROR,\r\n    USER_REGISTER,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_ERROR,\r\n    USER_REGISTER_RESET,\r\n    USER_LOGIN,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_ERROR,\r\n    USER_LOGOUT,\r\n    USER_LOGOUT_SUCCESS,\r\n    USER_ERROR_RESET\r\n} from './userTypes';\r\n\r\nconst onFetchUser = () => {\r\n    return {\r\n        type: FETCH_USER\r\n    }\r\n}\r\n\r\nconst onFetchUserSuccess = (user) => {\r\n    return {\r\n        type: FETCH_USER_SUCCESS,\r\n        payload: user\r\n    }\r\n}\r\n\r\nconst onFetchUserError = (error) => {\r\n    return {\r\n        type: FETCH_USER_ERROR,\r\n        payload: error\r\n    }\r\n}\r\n\r\nconst onRegisterUser = () => {\r\n    return {\r\n        type: USER_REGISTER,\r\n\r\n    }\r\n}\r\n\r\nconst onRegisterUserSuccess = (data) => {\r\n    return {\r\n        type: USER_REGISTER_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst onRegisterUserError = (error) => {\r\n    return {\r\n        type: USER_REGISTER_ERROR,\r\n        payload: error\r\n    }\r\n}\r\n\r\nconst onRegisterUserReset = () => {\r\n    return {\r\n        type: USER_REGISTER_RESET\r\n    }\r\n}\r\n\r\nconst onUserLogin=()=>{\r\n    return{\r\n        type:USER_LOGIN\r\n    }\r\n}\r\n\r\nconst onUserLoginSuccess=(data)=>{\r\n    return{\r\n        type:USER_LOGIN_SUCCESS,\r\n        payload:data\r\n    }\r\n}\r\n\r\nconst onUserLoginError=(error)=>{\r\n    return{\r\n        type:USER_LOGIN_ERROR,\r\n        payload:error\r\n    }\r\n}\r\n\r\nconst onUserLogout=()=>{\r\n    return{\r\n        type:USER_LOGOUT\r\n    }\r\n}\r\n\r\nconst onUserLogoutSuccess=()=>{\r\n    return{\r\n        type:USER_LOGOUT_SUCCESS\r\n    }\r\n}\r\n\r\nexport const onUserErrorReset=()=>{\r\n    return{\r\n        type:USER_ERROR_RESET\r\n    }\r\n}\r\n\r\nexport const registerUser = (userData,history) => {\r\n    return (dispatch) => {\r\n        dispatch(onRegisterUser());\r\n        axios.post(`${API_URL}/users/register`, userData)\r\n            .then(res => {                \r\n                dispatch(onRegisterUserSuccess(res.data.user));\r\n                localStorage.setItem(\"user\", res.data.token);\r\n\r\n                //Tokenization\r\n                setAuthHeaders();        \r\n\r\n                history.push(\"/\");\r\n\r\n            }).catch(err => {\r\n                if (err.response.data.error) {\r\n                    dispatch(onRegisterUserError(err.response.data.error.details[0][\"message\"]));\r\n                } else {\r\n                    dispatch(onRegisterUserError(err.response.data));\r\n                }                \r\n            })\r\n    }\r\n}\r\n\r\nexport const loginUser=(userData,history)=>{\r\n    return (dispatch)=>{\r\n        const rememberMe=userData.rememberMe;\r\n        //Remove Remember Me\r\n        delete userData.rememberMe;\r\n        \r\n        dispatch(onUserLogin());\r\n        axios.post(`${API_URL}/users/login`,userData)\r\n        .then(res=>{                     \r\n            dispatch(onUserLoginSuccess(res.data.user));            \r\n            if(rememberMe){\r\n                localStorage.setItem(\"user\", res.data.token);\r\n            }else{\r\n                sessionStorage.setItem(\"user\", res.data.token);\r\n            }\r\n\r\n            //Tokenization\r\n            setAuthHeaders();            \r\n\r\n            history.push(\"/\");\r\n            \r\n            \r\n        }).catch(err=>{ \r\n            console.log(err);           \r\n            if(err.response.data.error){\r\n                dispatch(onUserLoginError(err.response.data.error.details[0][\"message\"]));\r\n            }else{\r\n                dispatch(onUserLoginError(err.response.data));\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const logoutUser=(history)=>{\r\n    return (dispatch)=>{\r\n        dispatch(onUserLogoutSuccess());\r\n        \r\n        //Remove Authentication and Tokens\r\n        removeAuthHeaders();\r\n        removeToken();\r\n        localStorage.removeItem(\"persist:root\");\r\n        history.push(\"/\");\r\n    }\r\n}","E:\\FYP\\geo-ecommerce\\src\\services\\auth.js",[],"E:\\FYP\\geo-ecommerce\\src\\utils\\storage.js",[],"E:\\FYP\\geo-ecommerce\\src\\pages\\landing\\components\\how_saman_works_info.js",["197","198"],"import React from 'react';\r\nimport { Row, Col, Image } from 'antd';\r\nimport styled from 'styled-components';\r\nimport { Fragment } from 'react';\r\nimport { HowSamanWorksMainDiv } from '../style';\r\nimport  WhySamanBuyImage from '../../../assests/images/why_saman_buy.png';\r\n\r\nconst HowSamanWorksDiv = () => {\r\n    return (\r\n        <HowSamanWorksMainDiv>\r\n            <Row justify=\"center\">\r\n                <Col>\r\n                    <h2 className=\"how-it-works-title\">Why Saman.com?</h2>\r\n                </Col>\r\n            </Row>\r\n            <Row justify=\"center\">\r\n                <Col\r\n                    // md={7}\r\n                    // lg={7}\r\n                    // xs={24}\r\n                    style={{\r\n                        textAlign: \"center\"\r\n                    }}\r\n                >\r\n                    <h1 className=\"how-it-works-info\">Saman.com Provides a New Way<br />To Make Trades Faster Anywhere, Anytime.</h1>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row justify=\"center\" style={{\r\n                textAlign:'center'\r\n            }}>\r\n                <Col\r\n                    md={4}\r\n                    offset={2}\r\n                >\r\n                    <div>\r\n                    <Image\r\n                        src={WhySamanBuyImage}\r\n                    />                    \r\n                    </div>\r\n                    <div>\r\n                        <p className=\"how-it-works-info-headers\">Buy from your closest seller.</p>\r\n                    </div>\r\n                    <div>\r\n                        <p className=\"how-it-works-info-contents\">Saman recommends you products from the sellers that are nearest to you for your faster delivery .</p>\r\n                    </div>\r\n                </Col>\r\n                <Col\r\n                 md={4}\r\n                 offset={2}\r\n                >\r\n                    <Image\r\n                        src={WhySamanBuyImage}\r\n                    >\r\n\r\n                    </Image>\r\n                </Col>\r\n                <Col\r\n                    md={4}\r\n                    offset={2}\r\n                >\r\n                    <Image\r\n                        src={WhySamanBuyImage}\r\n                    >\r\n\r\n                    </Image>\r\n                </Col>\r\n                \r\n            </Row>\r\n        </HowSamanWorksMainDiv>\r\n    )\r\n}\r\n\r\nexport default HowSamanWorksDiv;","E:\\FYP\\geo-ecommerce\\src\\routes.js",[],"E:\\FYP\\geo-ecommerce\\src\\layout\\blank_layout.js",[],"E:\\FYP\\geo-ecommerce\\src\\layout\\conditional_layout.js",["199"],"import Layout, { Content, Header } from \"antd/lib/layout/layout\";\r\nimport Navbar from \"../components/nav_bar\";\r\n\r\nconst ConditionalLayout=({displaySearchBar,children})=>{        \r\n    return(\r\n        <Layout\r\n            style={{\r\n                backgroundColor:\"#fff\"\r\n            }}\r\n        >\r\n            <Content>\r\n            <Navbar displaySearchBar={displaySearchBar}/>\r\n                {children}\r\n            </Content>\r\n        </Layout>\r\n    )\r\n};\r\n\r\nexport default ConditionalLayout;","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\index.js",["200"],"import { useState } from 'react';\r\nimport { CustomTab, CustomTabPane } from './style';\r\nimport SellProductsTab from './components/sell_products_tab';\r\nimport SellerStoreTab from './components/your_store_tab';\r\n\r\n\r\n\r\nconst SellYourProductsPage = () => {\r\n\r\n    // //Handle Active Key\r\n    // const handleOnChange = (key) => {\r\n\r\n    // }\r\n\r\n    return (\r\n        <CustomTab defaultActiveKey=\"1\" >\r\n            <CustomTabPane tab=\"Sell Products\" key=\"1\">\r\n                <SellProductsTab />\r\n            </CustomTabPane>\r\n            <CustomTabPane tab=\"Your Store\" key=\"2\">\r\n                <SellerStoreTab />\r\n            </CustomTabPane>\r\n            <CustomTabPane tab=\"Sold Products\" key=\"3\">\r\n                Contents of Sold Products\r\n            </CustomTabPane>\r\n            <CustomTabPane tab=\"Orders\" key=\"4\">\r\n                Contents of Orders\r\n            </CustomTabPane>\r\n        </CustomTab>\r\n    )\r\n}\r\n\r\nexport default SellYourProductsPage;","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\style.js",[],["201","202"],"E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\index.js",["203","204"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Form, Row, Col, Select, Input, Button, message, notification } from 'antd';\r\nimport { DollarOutlined } from '@ant-design/icons';\r\nimport ProductDetailTable from './productDetailTable';\r\nimport UploadProductImages from './uploadImageComponent';\r\nimport { SELL_YOUR_PRODUCTS_PRODUCT_TYPES } from '../../../../enums';\r\nimport { addSellerProducts, onAddSellerProductsReset } from '../../../../redux';\r\n\r\n//Import Styles\r\nimport {\r\n    SellProductsMainDiv\r\n} from './style';\r\n\r\nconst SellProductsTab = () => {\r\n\r\n    //States\r\n    const [totalImages, setTotalImages] = useState([]);\r\n    const [productDetails, setProductDetails] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const user_id = useSelector(state => state.user.user?.user_id);\r\n    const addingProduct = useSelector(state => state.addSellerProducts?.addingSellerProducts);\r\n    const addingSellerProductsSuccess = useSelector(state => state.addSellerProducts?.addingSellerProductsSuccess);\r\n    const addingSellerProductsError = useSelector(state => state.addSellerProducts?.addingSellerProductsError);\r\n\r\n    useEffect(() => {\r\n        dispatch(onAddSellerProductsReset());\r\n    });\r\n\r\n    /* Notifications Use Effect*/\r\n    useEffect(() => {\r\n\r\n        addingSellerProductsSuccess && (\r\n            notification.success({\r\n                message: addingSellerProductsSuccess,\r\n                duration: 3\r\n            })\r\n        )\r\n\r\n\r\n\r\n        addingSellerProductsError && (\r\n            notification.error({\r\n                message: addingSellerProductsError,\r\n                duration: 3\r\n            })\r\n        )\r\n\r\n    }, [addingSellerProductsSuccess, addingSellerProductsError])\r\n\r\n    const [form] = Form.useForm();\r\n    //Form Finish\r\n    const onFinish = (values) => {\r\n        totalImages.length === 0 && message.error(\"Atleast one image is required.\");\r\n        productDetails.length === 0 && message.error(\"Atleast one product detail is required.\");\r\n\r\n        if (totalImages.length != 0 && productDetails.length != 0) {\r\n\r\n            const formData = new FormData();\r\n\r\n            formData.append(\"user_id\", user_id);\r\n            formData.append(\"productName\", values.productName);\r\n            formData.append(\"usedProduct\", values.usedProduct);\r\n            formData.append(\"productType\", values.productType);\r\n            formData.append(\"productSubType\", values.productSubType);\r\n            formData.append(\"quantity\", values.quantity);\r\n            formData.append(\"price\", values.price);\r\n            formData.append(\"productDetails\", JSON.stringify(productDetails));\r\n            totalImages.forEach(image => {\r\n                formData.append(\"imagesList\", image);\r\n            });\r\n            dispatch(addSellerProducts(formData));\r\n            //Clearing Fields and Arrays\r\n            form.resetFields()\r\n            setTotalImages([])\r\n            setProductDetails([])\r\n        }\r\n    }\r\n\r\n    const onFinishFailed = ({ errorFields }) => {\r\n        if (errorFields) {\r\n            message.error(\"All required fields must be filled.\");\r\n        }\r\n    }\r\n\r\n    const initialValues = {\r\n        usedProduct: \"no\"\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <SellProductsMainDiv>\r\n                <Form\r\n                    form={form}\r\n                    id=\"sellProductsForm\"\r\n                    labelCol={{\r\n                        md: { span: 9 },\r\n                        xs: { span: 9 }\r\n                    }}\r\n                    wrapperCol={{\r\n                        md: { span: 14 },\r\n                        xs: { span: 14 }\r\n                    }}\r\n                    name=\"sellProductsForm\"\r\n                    onFinish={onFinish}\r\n                    onFinishFailed={onFinishFailed}\r\n                    initialValues={initialValues}\r\n                >\r\n\r\n                    <h1>Product Informations</h1>\r\n\r\n\r\n                    <Row gutter={24}>\r\n                        <Col\r\n                            md={12}\r\n                            xs={24}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Product Name\"\r\n                                name=\"productName\"\r\n                                rules={[{ required: true }]}\r\n                            >\r\n                                <Input placeholder=\"Enter Product Name\" />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col\r\n                            md={12}\r\n                            xs={24}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Used Product\"\r\n                                name=\"usedProduct\"\r\n                            >\r\n                                <Select>\r\n                                    <Select.Option value=\"yes\">Yes</Select.Option>\r\n                                    <Select.Option value=\"no\">No</Select.Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col\r\n                            md={12}\r\n                            xs={24}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Product Type\"\r\n                                name=\"productType\"\r\n                                rules={[{ required: true }]}\r\n                            >\r\n                                <Select required>\r\n                                    {SELL_YOUR_PRODUCTS_PRODUCT_TYPES.map((data, i) => (\r\n                                        <Select.Option key={i} value={data.value}>{data.name}</Select.Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col\r\n                            md={12}\r\n                            xs={24}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Product Sub Type\"\r\n                                name=\"productSubType\"\r\n                                rules={[{ required: true }]}\r\n                            >\r\n                                <Select\r\n                                    showSearch\r\n                                >\r\n                                    {SELL_YOUR_PRODUCTS_PRODUCT_TYPES.map((type, i) => (\r\n                                        <Select.OptGroup label={type.name} key={i}>\r\n                                            {type.subGroup.map((subType, j) => {\r\n                                                return <Select.Option key={subType.value} value={subType.value}>{subType.name}</Select.Option>\r\n                                            })}\r\n                                        </Select.OptGroup>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        <Col\r\n                            md={12}\r\n                            xs={24}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Quantity\"\r\n                                name=\"quantity\"\r\n                                rules={[{ required: true }]}\r\n                            >\r\n                                <Input type=\"number\" placeholder=\"Products Available\" />\r\n                            </Form.Item>\r\n                        </Col>\r\n                        <Col\r\n                            md={12}\r\n                            xs={24}\r\n                        >\r\n                            <Form.Item\r\n                                label=\"Price\"\r\n                                name=\"price\"\r\n                                rules={[{ required: true }]}\r\n                            >\r\n                                <Input placeholder=\"Product Price\" type=\"number\" prefix={<DollarOutlined style={{ fontSize: \"1rem\", paddingRight: \"5px\" }} />} />\r\n                            </Form.Item>\r\n                        </Col>\r\n                    </Row>\r\n                    <ProductDetailTable productDetails={productDetails} setProductDetails={setProductDetails} />\r\n                    <h1 style={{ margin: \"30px 0px\" }}>Upload Product Images</h1>\r\n                    {/* <Form.Item> */}\r\n                    <UploadProductImages totalImages={totalImages} setTotalImages={setTotalImages} />\r\n                    {/* </Form.Item> */}\r\n\r\n                    <Form.Item\r\n                        wrapperCol={{\r\n                            span: 24\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            type=\"primary\"\r\n                            style={{\r\n                                float: \"right\",\r\n                                marginTop: \"40px\"\r\n                            }}\r\n                            className=\"form-submit\"\r\n                            loading={addingProduct}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </Form.Item>\r\n\r\n                </Form>\r\n            </SellProductsMainDiv>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SellProductsTab;","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\style.js",[],"E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\productDetailTable.js",["205","206","207","208"],"import { useRef } from 'react';\r\nimport { Table, Button, Row, Col, Input,Form } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { useState } from 'react';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nconst ProductDetailTable = ({ productDetails, setProductDetails }) => {\r\n\r\n    const detailInputRef = useRef(\"\");\r\n\r\n    const handleAddDetail = () => {\r\n        const inputValue = detailInputRef.current.state.value;\r\n        if (!inputValue || inputValue.trim() == \"\") {\r\n            detailInputRef.current.input.style.border = \"1px solid red\";\r\n        } else {\r\n            setProductDetails((prevState) => [...prevState, {\r\n                productDetail: inputValue,\r\n                uid: uuid()\r\n            }]);\r\n            //Clear Input Field            \r\n            detailInputRef.current.state.value=\"\";\r\n        }\r\n    }\r\n\r\n    //Detail Table Columns\r\n    const productDetailColumns = [\r\n        {\r\n            title: \"Details\",\r\n            dataIndex: \"details\",\r\n            key: \"details\",\r\n\r\n        },\r\n        {\r\n            title: \"Action\",\r\n            dataIndex: \"action\",\r\n            key: \"action\",\r\n            width: \"20%\",\r\n            align: \"center\",\r\n            render: (text, record, index) => (\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon={<DeleteOutlined />}\r\n                    onClick={() => {\r\n\r\n                        // Remove Details                        \r\n                        let removedDetailsArr = productDetails.filter(data => data.uid != record.uid);\r\n                        setProductDetails(removedDetailsArr);\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n\r\n    ];\r\n\r\n    const productDetailTableData = productDetails.map((data, i) => ({\r\n        key: i,\r\n        details: data.productDetail,\r\n        uid: data.uid\r\n    }));\r\n\r\n    return (\r\n        <>\r\n            <h1 style={{ margin: \"30px 0px\" }}>Add Product Details</h1>\r\n            <Row style={{ margin: \"30px 0px\" }}>\r\n\r\n                <Col\r\n                    md={{ span: 18, offset: 2 }}\r\n                    xs={24}\r\n                >                    \r\n                        <Input\r\n                            ref={detailInputRef}\r\n                            onChange={() => {\r\n                                detailInputRef.current.input.style.border = \"1px solid #d9d9d9\";\r\n                            }}\r\n                        />\r\n                </Col>\r\n                <Col\r\n                    md={4}\r\n                    xs={24}\r\n                >\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={handleAddDetail}\r\n                    >Add Detail</Button>\r\n                </Col>\r\n            </Row>\r\n            <Table\r\n                columns={productDetailColumns}\r\n                bordered={true}\r\n                dataSource={productDetailTableData}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ProductDetailTable;","E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\sell_products_tab\\uploadImageComponent.js",["209","210","211"],"import React, { useState, useEffect } from 'react';\r\nimport { Table, Upload, message, Button } from 'antd';\r\nimport { InboxOutlined, DeleteOutlined } from '@ant-design/icons';\r\n\r\nconst UploadProductImages = ({totalImages, setTotalImages}) => {\r\n    \r\n    const [imageAcceptedBool, setImageAcceptedBool] = useState(false);    \r\n\r\n    //Hide Image Table If No Images\r\n    useEffect(() => {\r\n        //Checking Total Image Array Length \r\n        if (totalImages.length == 0) {\r\n            setImageAcceptedBool(false);\r\n        }\r\n    }, [totalImages]);\r\n\r\n    //Antd uploader        \r\n    const { Dragger } = Upload;\r\n\r\n    //Upload Dragger Props\r\n    const draggerProps = {\r\n        name: \"imageUploader\",\r\n        multiple: true,\r\n        // accept: \".png,.jpg,.jpeg\",\r\n        showUploadList: false,\r\n        customRequest: ({file, onSuccess }) => {\r\n            onSuccess('ok');\r\n        },\r\n        beforeUpload: fileInfo => {\r\n            if (fileInfo.type.split(\"/\")[0] === \"image\") {\r\n                return true;\r\n            } else {\r\n                message.error(\"Uploaded file must be image.\");\r\n                return false;\r\n            }\r\n        },\r\n        onChange(fileInfo) {\r\n            let filteredImage = [];\r\n            if (fileInfo.file.status == \"done\") {                \r\n                fileInfo.fileList.forEach(file => {\r\n                    let fileType = file.type.split(\"/\")[0];\r\n                    if (fileType === \"image\") {                        \r\n                        file.originFileObj.fileName=file.originFileObj.name;\r\n                        filteredImage.push(file.originFileObj);\r\n                    }\r\n                });\r\n                setTotalImages(filteredImage);\r\n                setImageAcceptedBool(true);                \r\n\r\n            }\r\n        },\r\n        style: {\r\n            minHeight: \"200px\",\r\n            alignItems: \"center\",\r\n            display: \"flex\"\r\n        }\r\n    };\r\n\r\n    //Images Table Columns\r\n    const imageTableColumns = [\r\n        {\r\n            title: \"Image Name\",\r\n            dataIndex: \"imageName\",\r\n            key: \"imageName\",\r\n\r\n        },\r\n        {\r\n            title: \"Action\",\r\n            dataIndex: \"action\",\r\n            key: \"action\",\r\n            width: \"20%\",\r\n            align: \"center\",\r\n            render: (text, record, index) => (\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon={<DeleteOutlined />}\r\n                    onClick={() => {\r\n                        //Remove Image\r\n                        let removedImageArr = totalImages.filter(data => data.uid != record.uid);\r\n                        setTotalImages([...removedImageArr]);\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n    ];\r\n\r\n    \r\n    const imageTableData = totalImages.map((imageObj, i) => ({\r\n        key: i,\r\n        imageName: imageObj.name,\r\n        uid: imageObj.uid\r\n    }));\r\n\r\n    return (\r\n        <div>\r\n            <Dragger\r\n                {...draggerProps}\r\n                fileList={totalImages} //Resetting Antd Upload File List \r\n            >\r\n                <InboxOutlined style={{ fontSize: \"2rem\" }} />\r\n                <p className=\"ant-upload-text\">Click or drag images to upload.</p>\r\n            </Dragger>\r\n            {\r\n                imageAcceptedBool ?\r\n                    <div>\r\n                        <Table\r\n                            columns={imageTableColumns}\r\n                            bordered={true}\r\n                            dataSource={imageTableData}\r\n                            style={{ padding: \"10px 0px\" }}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    \"\"\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default UploadProductImages;","E:\\FYP\\geo-ecommerce\\src\\redux\\seller_products\\sellerProductsActions.js",[],"E:\\FYP\\geo-ecommerce\\src\\redux\\seller_products\\sellerProductsTypes.js",[],"E:\\FYP\\geo-ecommerce\\src\\redux\\seller_products\\sellerProductsReducer.js",[],"E:\\FYP\\geo-ecommerce\\src\\pages\\sell_your_products\\components\\your_store_tab\\index.js",["212"],"import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Table, Alert, Button, Image, Modal, Input, message, notification } from 'antd';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\nimport { deleteSellerProduct, onDeleteSellerProductReset, updateSellerProduct, onUpdateSellerProductReset, getAllSellerProducts } from '../../../../redux';\r\n\r\nconst SellerStoreTab = () => {\r\n\r\n    const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n    const [showUpdateModal, setShowUpdateModal] = useState(false);\r\n    const [deleteModalInput, setDeleteModalInput] = useState(\"\");\r\n    const [productIdToDelete, setProductIdToDelete] = useState(null);\r\n    const [productNameToDelete, setProductNameToDelete] = useState(null);\r\n    const [productNameToUpdate, setProductNameToUpdate] = useState(null);\r\n    const [productIdToUpdate, setProductIdToUpdate] = useState(null);\r\n    const [productQuantityToUpdate, setProductQuantityToUpdate] = useState(null);\r\n\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector(state => state.user?.user);\r\n    const gettingSellerAllProducts = useSelector(state => state.sellerAllProducts?.gettingAllSellerProducts);\r\n    const gettingAllSellerProductsError = useSelector(state => state.sellerAllProducts?.gettingAllSellerProductsError);\r\n    const allSellerProducts = useSelector(state => state.sellerAllProducts?.allSellerProducts);\r\n    const deletingSellerProductSuccess = useSelector(state => state.addSellerProducts?.deletingSellerProductSuccess);\r\n    const deletingSellerProductError = useSelector(state => state.addSellerProducts?.deletingSellerProductError);\r\n    const updatingSellerProductSuccess = useSelector(state => state.addSellerProducts?.updatingSellerProductSuccess);\r\n    const updatingSellerProductError = useSelector(state => state.addSellerProducts?.updatingSellerProductError);\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(onDeleteSellerProductReset());\r\n        dispatch(onUpdateSellerProductReset());\r\n    })\r\n\r\n    //Table Data\r\n    useEffect(() => {\r\n        setProducts(allSellerProducts?.seller_products_details);\r\n    }, [allSellerProducts]);\r\n\r\n\r\n    useEffect(() => {\r\n        const userId = user?.user_id;\r\n        dispatch(getAllSellerProducts(userId));\r\n    }, [updatingSellerProductSuccess])\r\n\r\n    //Notifications Use Effects\r\n    useEffect(() => {\r\n        deletingSellerProductSuccess &&\r\n            (\r\n                notification.success({\r\n                    message: deletingSellerProductSuccess,\r\n                    duration: 3\r\n                })\r\n            )\r\n\r\n        deletingSellerProductError &&\r\n            (\r\n                notification.error({\r\n                    message: deletingSellerProductError,\r\n                    duration: 3\r\n                })\r\n            )\r\n\r\n\r\n        updatingSellerProductSuccess &&\r\n            (\r\n                notification.success({\r\n                    message: updatingSellerProductSuccess,\r\n                    duration: 3\r\n                })\r\n            )\r\n\r\n\r\n        updatingSellerProductError &&\r\n            (\r\n                notification.error({\r\n                    message: updatingSellerProductError,\r\n                    duration: 3\r\n                })\r\n            )\r\n\r\n    }, [\r\n        deletingSellerProductSuccess,\r\n        deletingSellerProductError,\r\n        updatingSellerProductSuccess,\r\n        updatingSellerProductError\r\n    ]);\r\n\r\n\r\n    const openDeleteModal = (data) => {\r\n        setProductIdToDelete(data.productId);\r\n        setProductNameToDelete(data.productName);\r\n        setShowDeleteModal(true);\r\n    }\r\n\r\n    const deleteProduct = () => {\r\n        const user_id = allSellerProducts?.user_id;\r\n\r\n        const value = {\r\n            user_id: user_id,\r\n            product_id: productIdToDelete\r\n        }\r\n\r\n        if (deleteModalInput === \"DELETE\") {\r\n            dispatch(deleteSellerProduct(value));\r\n            console.log(products);\r\n            let allSellerProductsFiltered = products?.filter(data => data.product_id !== value.product_id);\r\n            console.log(allSellerProductsFiltered);\r\n            setProducts([...allSellerProductsFiltered]);\r\n            setProductIdToDelete(null);\r\n            setProductNameToDelete(null);\r\n            setDeleteModalInput(null);\r\n            setShowDeleteModal(false);\r\n        } else {\r\n            message.error(\"Type DELETE Again!\");\r\n        }\r\n    }\r\n\r\n    const cancelDelete = () => {\r\n        setProductIdToDelete(null);\r\n        setProductNameToDelete(null);\r\n        setShowDeleteModal(false);\r\n    }\r\n\r\n    const openUpdateModal = (data) => {\r\n        setProductIdToUpdate(data.productId);\r\n        setProductNameToUpdate(data.productName);\r\n        setProductQuantityToUpdate(data.productQuantity);\r\n        setShowUpdateModal(true);\r\n    }\r\n\r\n    const updateProduct = () => {\r\n        const user_id = allSellerProducts?.user_id;\r\n        const value = {\r\n            user_id: user_id,\r\n            product_id: productIdToUpdate,\r\n            product_quantity: productQuantityToUpdate\r\n        }\r\n        dispatch(updateSellerProduct(value));\r\n    }\r\n\r\n    const cancelUpdate = () => {\r\n        setProductIdToUpdate(null);\r\n        setProductNameToUpdate(null);\r\n        setProductQuantityToUpdate(null);\r\n        setShowUpdateModal(false);\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Product Name',\r\n            dataIndex: \"productName\",\r\n            key: \"productName\",\r\n        },\r\n        {\r\n            title: 'Product Quantity',\r\n            dataIndex: \"productQuantity\",\r\n            key: \"productQuantity\",\r\n            render: (text, record, index) => {\r\n                return (\r\n                    <Input value={record.productQuantity}\r\n                        onClick={() => { openUpdateModal(record) }}\r\n                    ></Input>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            title: 'Product Type',\r\n            dataIndex: \"productType\",\r\n            key: \"productType\",\r\n\r\n        },\r\n        {\r\n            title: 'Product Sub Type',\r\n            dataIndex: \"productSubType\",\r\n            key: \"productSubType\",\r\n\r\n        },\r\n        {\r\n            title: 'Images',\r\n            dataIndex: 'images',\r\n            key: \"images\",\r\n            responsive: ['md'],\r\n            width: 200,\r\n            ellipsis: {\r\n                showTitle: true,\r\n            },\r\n            render: (text, record, index) => {\r\n                return (\r\n                    <>\r\n                        <Image.PreviewGroup\r\n                            style={{\r\n                                width: \"400\"\r\n                            }}\r\n                        >\r\n                            {record?.productImages.map((data, i) => (\r\n                                <Image\r\n                                    style={{\r\n                                        padding: \"5px\"\r\n                                    }}\r\n                                    key={i}\r\n                                    width={100}\r\n                                    src={require(`../../../../assests/images/product_images/${data?.image ? data?.image : \"\"}`).default}\r\n                                />\r\n                            ))}\r\n                        </Image.PreviewGroup>\r\n                    </>\r\n                );\r\n            }\r\n        },\r\n        {\r\n            title: \"Action\",\r\n            dataIndex: \"action\",\r\n            key: \"action\",\r\n            align: \"center\",\r\n            render: (text, record, index) =>\r\n            (\r\n                <Button\r\n                    type=\"primary\"\r\n                    icon={<DeleteOutlined />}\r\n                    onClick={() => {\r\n                        openDeleteModal(record);\r\n                    }}\r\n                />\r\n            )\r\n        }\r\n    ]\r\n\r\n    const tableData = products?.map((data, index) => ({\r\n        key: index,\r\n        productName: data.product_name,\r\n        productQuantity: data.product_quantity,\r\n        productType: data.product_type,\r\n        productSubType: data.product_sub_type,\r\n        productId: data.product_id,\r\n        productImages: data.product_images\r\n    }));\r\n    return (\r\n        <div\r\n            style={{\r\n                backgroundColor: \"white\"\r\n            }}\r\n        >\r\n            {/* Alerts */}\r\n            {gettingAllSellerProductsError &&\r\n                (\r\n                    window.scrollTo(0, 0),\r\n                    <Alert type=\"error\" message={gettingAllSellerProductsError} banner closable />\r\n                )\r\n            }\r\n\r\n            <Table\r\n                columns={columns}\r\n                loading={gettingSellerAllProducts}\r\n                dataSource={tableData}\r\n                bordered\r\n                style={{\r\n                    overflow: \"auto\"\r\n                }}\r\n            />\r\n\r\n            <Modal\r\n                title={`Delete Product ${productNameToDelete}`}\r\n                visible={showDeleteModal}\r\n                onOk={deleteProduct}\r\n                onCancel={cancelDelete}\r\n                maskClosable={false}\r\n            >\r\n                <p>DELETING THE PRODUCT WILL DELETE ALL ITS IMAGES AND DETAILS.</p>\r\n                <p>TYPE \"DELETE\" AND CLICK OK BELOW TO DELETE.</p>\r\n                <Input\r\n                    value={deleteModalInput}\r\n                    onChange={(e) => {\r\n                        setDeleteModalInput(e.target.value);\r\n                    }}\r\n                >\r\n                </Input>\r\n            </Modal>\r\n            <Modal\r\n                title={`Upload Product ${productNameToUpdate}`}\r\n                visible={showUpdateModal}\r\n                onOk={updateProduct}\r\n                onCancel={cancelUpdate}\r\n                maskClosable={false}\r\n            >\r\n                <p>Product Quantity</p>\r\n                <Input\r\n                    type=\"number\"\r\n                    min={0}\r\n                    value={productQuantityToUpdate}\r\n                    onChange={(e) => {\r\n                        setProductQuantityToUpdate(e.target.value);\r\n                    }}\r\n                >\r\n                </Input>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SellerStoreTab;",{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":1,"column":8,"nodeType":"219","messageId":"220","endLine":1,"endColumn":12},{"ruleId":"217","severity":1,"message":"221","line":5,"column":27,"nodeType":"219","messageId":"220","endLine":5,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":29,"column":6,"nodeType":"224","endLine":29,"endColumn":43,"suggestions":"225"},{"ruleId":"217","severity":1,"message":"226","line":3,"column":16,"nodeType":"219","messageId":"220","endLine":3,"endColumn":24},{"ruleId":"217","severity":1,"message":"227","line":3,"column":26,"nodeType":"219","messageId":"220","endLine":3,"endColumn":36},{"ruleId":"222","severity":1,"message":"223","line":28,"column":7,"nodeType":"224","endLine":28,"endColumn":9,"suggestions":"228"},{"ruleId":"222","severity":1,"message":"229","line":55,"column":8,"nodeType":"224","endLine":55,"endColumn":20,"suggestions":"230"},{"ruleId":"217","severity":1,"message":"231","line":1,"column":17,"nodeType":"219","messageId":"220","endLine":1,"endColumn":25},{"ruleId":"217","severity":1,"message":"226","line":3,"column":28,"nodeType":"219","messageId":"220","endLine":3,"endColumn":36},{"ruleId":"222","severity":1,"message":"223","line":24,"column":7,"nodeType":"224","endLine":24,"endColumn":9,"suggestions":"232"},{"ruleId":"233","severity":1,"message":"234","line":139,"column":49,"nodeType":"235","endLine":139,"endColumn":79},{"ruleId":"233","severity":1,"message":"234","line":196,"column":49,"nodeType":"235","endLine":196,"endColumn":106},{"ruleId":"217","severity":1,"message":"236","line":2,"column":15,"nodeType":"219","messageId":"220","endLine":2,"endColumn":23},{"ruleId":"217","severity":1,"message":"237","line":7,"column":10,"nodeType":"219","messageId":"220","endLine":7,"endColumn":26},{"ruleId":"217","severity":1,"message":"238","line":85,"column":11,"nodeType":"219","messageId":"220","endLine":85,"endColumn":28},{"ruleId":"239","severity":1,"message":"240","line":96,"column":22,"nodeType":"219","messageId":"241","endLine":96,"endColumn":27},{"ruleId":"217","severity":1,"message":"242","line":7,"column":10,"nodeType":"219","messageId":"220","endLine":7,"endColumn":16},{"ruleId":"243","severity":1,"message":"244","line":38,"column":1,"nodeType":"245","endLine":41,"endColumn":2},{"ruleId":"217","severity":1,"message":"246","line":11,"column":5,"nodeType":"219","messageId":"220","endLine":11,"endColumn":16},{"ruleId":"217","severity":1,"message":"247","line":13,"column":5,"nodeType":"219","messageId":"220","endLine":13,"endColumn":15},{"ruleId":"217","severity":1,"message":"248","line":14,"column":5,"nodeType":"219","messageId":"220","endLine":14,"endColumn":23},{"ruleId":"217","severity":1,"message":"249","line":15,"column":5,"nodeType":"219","messageId":"220","endLine":15,"endColumn":21},{"ruleId":"217","severity":1,"message":"250","line":22,"column":7,"nodeType":"219","messageId":"220","endLine":22,"endColumn":18},{"ruleId":"217","severity":1,"message":"251","line":28,"column":7,"nodeType":"219","messageId":"220","endLine":28,"endColumn":25},{"ruleId":"217","severity":1,"message":"252","line":35,"column":7,"nodeType":"219","messageId":"220","endLine":35,"endColumn":23},{"ruleId":"217","severity":1,"message":"253","line":63,"column":7,"nodeType":"219","messageId":"220","endLine":63,"endColumn":26},{"ruleId":"217","severity":1,"message":"254","line":89,"column":7,"nodeType":"219","messageId":"220","endLine":89,"endColumn":19},{"ruleId":"217","severity":1,"message":"255","line":3,"column":8,"nodeType":"219","messageId":"220","endLine":3,"endColumn":14},{"ruleId":"217","severity":1,"message":"256","line":4,"column":10,"nodeType":"219","messageId":"220","endLine":4,"endColumn":18},{"ruleId":"217","severity":1,"message":"257","line":1,"column":27,"nodeType":"219","messageId":"220","endLine":1,"endColumn":33},{"ruleId":"217","severity":1,"message":"231","line":1,"column":10,"nodeType":"219","messageId":"220","endLine":1,"endColumn":18},{"ruleId":"213","replacedBy":"258"},{"ruleId":"215","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":59,"column":32,"nodeType":"262","messageId":"263","endLine":59,"endColumn":34},{"ruleId":"260","severity":1,"message":"261","line":59,"column":62,"nodeType":"262","messageId":"263","endLine":59,"endColumn":64},{"ruleId":"217","severity":1,"message":"264","line":2,"column":41,"nodeType":"219","messageId":"220","endLine":2,"endColumn":45},{"ruleId":"217","severity":1,"message":"231","line":4,"column":10,"nodeType":"219","messageId":"220","endLine":4,"endColumn":18},{"ruleId":"260","severity":1,"message":"265","line":13,"column":46,"nodeType":"262","messageId":"263","endLine":13,"endColumn":48},{"ruleId":"260","severity":1,"message":"261","line":46,"column":88,"nodeType":"262","messageId":"263","endLine":46,"endColumn":90},{"ruleId":"260","severity":1,"message":"265","line":12,"column":32,"nodeType":"262","messageId":"263","endLine":12,"endColumn":34},{"ruleId":"260","severity":1,"message":"265","line":39,"column":38,"nodeType":"262","messageId":"263","endLine":39,"endColumn":40},{"ruleId":"260","severity":1,"message":"261","line":79,"column":83,"nodeType":"262","messageId":"263","endLine":79,"endColumn":85},{"ruleId":"222","severity":1,"message":"266","line":46,"column":8,"nodeType":"224","endLine":46,"endColumn":38,"suggestions":"267"},"no-native-reassign",["268"],"no-negated-in-lhs",["269"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["270"],"'Redirect' is defined but never used.","'withRouter' is defined but never used.",["271"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["272"],"'useState' is defined but never used.",["273"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Dropdown' is defined but never used.","'DownCircleFilled' is defined but never used.","'getRotationDegree' is assigned a value but never used.","no-redeclare","'angle' is already defined.","redeclared","'Select' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'USER_LOGOUT' is defined but never used.","'FETCH_USER' is defined but never used.","'FETCH_USER_SUCCESS' is defined but never used.","'FETCH_USER_ERROR' is defined but never used.","'onFetchUser' is assigned a value but never used.","'onFetchUserSuccess' is assigned a value but never used.","'onFetchUserError' is assigned a value but never used.","'onRegisterUserReset' is assigned a value but never used.","'onUserLogout' is assigned a value but never used.","'styled' is defined but never used.","'Fragment' is defined but never used.","'Header' is defined but never used.",["268"],["269"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Form' is defined but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'dispatch' and 'user?.user_id'. Either include them or remove the dependency array.",["274"],"no-global-assign","no-unsafe-negation",{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"277","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [userId, addingSellerProductsSuccess, dispatch]",{"range":"284","text":"285"},"Update the dependencies array to be: [dispatch]",{"range":"286","text":"287"},"Update the dependencies array to be: [history, userDetail]",{"range":"288","text":"289"},{"range":"290","text":"287"},"Update the dependencies array to be: [dispatch, updatingSellerProductSuccess, user?.user_id]",{"range":"291","text":"292"},[874,911],"[userId, addingSellerProductsSuccess, dispatch]",[1209,1211],"[dispatch]",[1973,1985],"[history, userDetail]",[1098,1100],[2360,2390],"[dispatch, updatingSellerProductSuccess, user?.user_id]"]